#!/bin/bash

function signAppArray {
    array=("$@")
    for i in "${array[@]}"
    do
	signAppFile "$i"
    done
}

function signAppFile {
    # sandboxing is triggered and controlled by engauge.entitlements file, which was created in 
    # code for a dummy project
    file="$1"
    echo "$file"
    codesign \
	-s "3rd Party Mac Developer Application: Mark Mitchell" \
	--entitlements dev/osx/engauge.entitlements \
	"$file"
}

function signAppFramework {
    vc="engauge.app/Contents/Frameworks/$1.framework/Versions/Current/$1"
    signAppFile "$vc"
}

# Make sure environment variables are correctly set
exe=`which macdeployqt`
if [ -z "$exe" ]; then
    echo "'source dev/osx/macosx_setup' must be run before this script"
    exit
fi

# Remove old build. Need root privileges
sudo rm -rf engauge.app 2>/dev/null

# Make into engauge.app
make 

# Help
cd help
./build
cd ..
mkdir -p engauge.app/Contents/Resources/documentation
cp -r bin/documentation/engauge.* engauge.app/Contents/Resources/documentation

# Icons
cp src/img/digitizer.icns engauge.app/Contents/Resources/

# Debug symbols are just dropped for now
dsymutil engauge.app/Contents/MacOS/engauge -o engauge.app.dSYM

# Manually insert version numbering
echo "In another window:"
echo "1. source dev/osx/macosx_setup"
echo "2. sudo <editor> engauge.app/Contents/Info.plist"
echo "3. for key CFBundleIconFile, insert 'digitizer.icns' for the string"
echo "4. remove existing CFBundleIdentifier entry"
echo "5. insert dev/osx/engauge_deltas_for_Info.plist"
echo "6. if resubmitting to app store, append/add .1 to version number"
read -p "Press any key to continue"

# Insert Qt libraries
macdeployqt engauge.app -appstore-compliant

# Code signing
frameworks=(QtCLucene QtCore QtGui QtHelp QtNetwork QtPrintSupport QtSql QtWidgets QtXml)
for i in "${frameworks[@]}"
do
    signAppFramework $i
done

signAppArray `find engauge.app | grep '/Frameworks/lib'`
signAppArray `find engauge.app | grep '/documentation/engauge'`
signAppArray `find engauge.app | grep '/translations/engauge_'`
signAppArray `find engauge.app | grep '/PlugIns/bearer/lib'`
signAppArray `find engauge.app | grep '/PlugIns/imageformats/lib'`
signAppArray `find engauge.app | grep '/PlugIns/platforms/lib'`
signAppArray `find engauge.app | grep '/PlugIns/printsupport/lib'`
signAppArray `find engauge.app | grep '/PlugIns/sqldrivers/lib'`
signAppFile engauge.app/Contents/MacOS/engauge

# remove log file
rm engauge.app/Contents/MacOS/engauge.log 2>/dev/null

# build package
productbuild --component engauge.app /Applications engauge.pkg

# sign package
productsign --sign "3rd Party Mac Developer Installer: Mark Mitchell" engauge.pkg engauge.pkg.signed
mv engauge.pkg.signed engauge.pkg

# test the built package
echo "Testing the built package. Output should have lines like 0% complete, 20% complete, ..., 100% complete"
sudo installer -store -pkg engauge.pkg -target /

echo "Assuming the test results show '0% complete, ..., 100% complete', open Xcode and then select Xcode / Open Developer Tools / Application Loader to upload engauge.pkg"
